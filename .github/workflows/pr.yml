name: PR Validation

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  validate:
    name: Validate PR
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.20'

    - name: Install dependencies
      run: |
        go mod download
        sudo apt-get update
        sudo apt-get install -y protobuf-compiler
        go install google.golang.org/protobuf/cmd/protoc-gen-go@latest
        go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@latest

    - name: Generate protobuf files
      run: |
        export PATH="$PATH:$(go env GOPATH)/bin"
        ./scripts/generate-proto.sh

    - name: Check formatting
      run: |
        if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
          echo "::error::Code is not formatted. Please run 'go fmt ./...'"
          gofmt -s -l .
          exit 1
        fi

    - name: Run tests
      run: |
        go test -v -race -coverprofile=coverage.out ./...

    - name: Check test coverage
      run: |
        COVERAGE=$(go tool cover -func=coverage.out | grep total | awk '{print $3}' | sed 's/%//')
        echo "Test coverage: ${COVERAGE}%"
        if (( $(echo "$COVERAGE < 50" | bc -l) )); then
          echo "::warning::Test coverage is below 50%"
        fi

    - name: Run linters
      uses: golangci/golangci-lint-action@v4
      with:
        version: latest
        args: --timeout=5m

    - name: Check for breaking changes
      run: |
        echo "Checking for breaking API changes..."
        # Add custom breaking change detection here if needed

    - name: Validate commit messages
      uses: wagoid/commitlint-github-action@v5
      continue-on-error: true

    - name: Comment PR
      uses: actions/github-script@v7
      if: always()
      with:
        script: |
          const fs = require('fs');
          const coverage = fs.readFileSync('coverage.out', 'utf8');
          const lines = coverage.split('\n');
          const totalLine = lines[lines.length - 2];
          const match = totalLine.match(/(\d+\.\d+)%/);
          const coveragePercent = match ? match[1] : 'unknown';

          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `## PR Validation Results\n\nâœ… Tests passed\nðŸ“Š Coverage: ${coveragePercent}%\n\nGreat work! ðŸŽ‰`
          });

  size-check:
    name: Check Binary Size
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.20'

    - name: Install dependencies
      run: |
        go mod download
        sudo apt-get update
        sudo apt-get install -y protobuf-compiler
        go install google.golang.org/protobuf/cmd/protoc-gen-go@latest
        go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@latest

    - name: Generate protobuf files
      run: |
        export PATH="$PATH:$(go env GOPATH)/bin"
        ./scripts/generate-proto.sh

    - name: Build binaries
      run: |
        make build

    - name: Check binary sizes
      run: |
        echo "Binary sizes:"
        ls -lh build/
        SERVER_SIZE=$(stat -f%z build/distkv-server 2>/dev/null || stat -c%s build/distkv-server)
        CLIENT_SIZE=$(stat -f%z build/distkv-client 2>/dev/null || stat -c%s build/distkv-client)
        echo "Server: $(numfmt --to=iec $SERVER_SIZE)"
        echo "Client: $(numfmt --to=iec $CLIENT_SIZE)"

        # Warning if binaries are too large
        if [ $SERVER_SIZE -gt 52428800 ]; then  # 50MB
          echo "::warning::Server binary is larger than 50MB"
        fi
