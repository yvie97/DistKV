# Docker Compose configuration for DistKV cluster
# This sets up a 3-node DistKV cluster for development and testing

version: '3.8'

services:
  # Node 1 - Seed node
  distkv-node1:
    build: .
    container_name: distkv-node1
    hostname: distkv-node1
    ports:
      - "8080:8080"
    environment:
      - NODE_ID=node1
      - ADDRESS=0.0.0.0:8080
      - DATA_DIR=/data
    volumes:
      - distkv-node1-data:/data
    command: ["./distkv-server", "-node-id=node1", "-address=0.0.0.0:8080", "-data-dir=/data"]
    networks:
      - distkv-network
    healthcheck:
      test: ["CMD", "./distkv-client", "-server=localhost:8080", "status"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Node 2 - Joins via node1
  distkv-node2:
    build: .
    container_name: distkv-node2
    hostname: distkv-node2
    ports:
      - "8081:8080"
    environment:
      - NODE_ID=node2
      - ADDRESS=0.0.0.0:8080
      - DATA_DIR=/data
    volumes:
      - distkv-node2-data:/data
    command: ["./distkv-server", "-node-id=node2", "-address=0.0.0.0:8080", "-data-dir=/data", "-seed-nodes=distkv-node1:8080"]
    depends_on:
      - distkv-node1
    networks:
      - distkv-network
    healthcheck:
      test: ["CMD", "./distkv-client", "-server=localhost:8080", "status"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Node 3 - Joins via node1
  distkv-node3:
    build: .
    container_name: distkv-node3
    hostname: distkv-node3
    ports:
      - "8082:8080"
    environment:
      - NODE_ID=node3
      - ADDRESS=0.0.0.0:8080
      - DATA_DIR=/data
    volumes:
      - distkv-node3-data:/data
    command: ["./distkv-server", "-node-id=node3", "-address=0.0.0.0:8080", "-data-dir=/data", "-seed-nodes=distkv-node1:8080"]
    depends_on:
      - distkv-node1
    networks:
      - distkv-network
    healthcheck:
      test: ["CMD", "./distkv-client", "-server=localhost:8080", "status"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Optional: Load balancer/proxy
  distkv-proxy:
    image: nginx:alpine
    container_name: distkv-proxy
    ports:
      - "8090:80"
    volumes:
      - ./deploy/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - distkv-node1
      - distkv-node2
      - distkv-node3
    networks:
      - distkv-network
    profiles:
      - with-proxy

  # Monitoring with Prometheus (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: distkv-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./deploy/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    networks:
      - distkv-network
    profiles:
      - with-monitoring

  # Grafana for visualization (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: distkv-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana-data:/var/lib/grafana
      - ./deploy/grafana:/etc/grafana/provisioning
    depends_on:
      - prometheus
    networks:
      - distkv-network
    profiles:
      - with-monitoring

# Persistent volumes
volumes:
  distkv-node1-data:
    driver: local
  distkv-node2-data:
    driver: local
  distkv-node3-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local

# Network for inter-node communication
networks:
  distkv-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# Usage examples:
# 
# 1. Start basic 3-node cluster:
#    docker-compose up -d
#
# 2. Start cluster with load balancer:
#    docker-compose --profile with-proxy up -d
#
# 3. Start cluster with monitoring:
#    docker-compose --profile with-monitoring up -d
#
# 4. Start everything:
#    docker-compose --profile with-proxy --profile with-monitoring up -d
#
# 5. Scale nodes (add more replicas):
#    docker-compose up -d --scale distkv-node2=2
#
# 6. View logs:
#    docker-compose logs -f distkv-node1
#
# 7. Test the cluster:
#    docker-compose exec distkv-node1 ./distkv-client put test "Hello World"
#    docker-compose exec distkv-node1 ./distkv-client get test
#    docker-compose exec distkv-node1 ./distkv-client status
#
# 8. Clean up:
#    docker-compose down -v